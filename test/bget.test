<?php

class BgetTestCase extends DrupalWebTestCase {
  function getInfo() {
    return array(
      'name' => 'Better Getter tests',
      'description' => 'Tests for Better Getter',
      'group' => 'Better Getter',
    );
  }

  function setUp() {
    parent::setUp('bget');
  }

  /**
   * Test getting and setting the URI to access.
   */
  function testGetSetUri() {
    $bg = new BetterGetter('http://example.com/');
    $this->assertEqual($bg->getUri(), 'http://example.com/', t('Setting URI with constructor method and fetching with getUri() method'));
    $this->assertEqual($bg->setUri('http://example.org/foo')->getUri(), 'http://example.org/foo', t('Setting URI with setUri() method and fetching with getUri() method'));
  }

  /**
   * Test getting and setting cURL library options in various ways.
   */
  function testGetSetCurlOpts() {
    $bg = new BetterGetter('http://example.com/');
    $opts = array(
      CURLOPT_AUTOREFERER => TRUE,
      CURLOPT_USERAGENT => 'Better Getter',
      CURLOPT_USERPWD => 'foo:bar',
      CURLOPT_HTTPPROXYTUNNEL => FALSE,
    );
    $bg->setCurlOpt(CURLOPT_AUTOREFERER, $opts[CURLOPT_AUTOREFERER])->setCurlOpt(CURLOPT_USERAGENT, $opts[CURLOPT_USERAGENT]);
    $this->assertEqual($bg->getCurlOpt(CURLOPT_USERAGENT), $opts[CURLOPT_USERAGENT], t('Setting single options with setCurlOpt() method and getting with getCurlOpt() method'));
    $this->assertEqual(
      $bg->getCurlOpts(),
      array(
        CURLOPT_AUTOREFERER => $opts[CURLOPT_AUTOREFERER],
        CURLOPT_USERAGENT => $opts[CURLOPT_USERAGENT],
      ),
      t('Fetching multiple options with getCurlOpts() method')
    );
    unset($bg);
    $bg = new BetterGetter('http://example.org/');
    $bg->setCurlOpts($opts);
    $this->assertEqual($bg->getCurlOpts(), $opts, t('Setting multiple options with setCurlOpts() method'));
  }

  /**
   * Test executing a cURL handle.
   */
  function testExecution() {
    $bg = new BetterGetter(url('<front>', array('absolute' => TRUE)));
    $this->assertTrue($bg->execute()->getRawResponse(), t('Simple execution for site front page returns non-empty response'));

    $message = t('BetterGetterCurlException thrown predictably for invalid URI');
    $bg = new BetterGetter();
    try {
      $bg->execute();
      $this->fail($message);
    }
    catch (Exception $e) {
      if (is_a($e, 'BetterGetterCurlException') && $e->getCode() == 3) {
        $this->pass($message);
      }
      else {
        $this->fail($message);
      }
    }
  }
}

class BgetHttpTestCase extends DrupalWebTestCase {
  function getInfo() {
    return array(
      'name' => 'Better Getter HTTP tests',
      'description' => 'Tests for Better Getter HTTP class',
      'group' => 'Better Getter',
    );
  }

  function setUp() {
    parent::setUp('bget');
  }

  function testSetCurlOpt() {
    $message = t('Setting CURLOPT_HTTPHEADER cURL option throws BetterGetterConfigException');
    $bg = new BetterGetterHttp('http://example.com/');
    try {
      $bg->setCurlOpt(CURLOPT_HTTPHEADER, array());
      $this->fail($message);
    }
    catch (Exception $e) {
      if (is_a($e, 'BetterGetterConfigException')) {
        $this->pass($message);
      }
      else {
        $this->fail($message);
      }
    }
  }

  function testRequestHeaderHandling() {
    $bg = new BetterGetterHttp('http://example.com/');
    $headers = array(
      'User-Agent' => 'BetterGetter',
      'X-Foo' => array('Bar', 'Baz'),
    );
    $bg->setRequestHeader('User-Agent', $headers['User-Agent']);
    $this->assertEqual($bg->getRequestHeader('User-Agent'), array($headers['User-Agent']), t('Getting and setting a single header'));
    $bg->setRequestHeaders($headers);
    $this->assertEqual($bg->getRequestHeader('X-Foo'), $headers['X-Foo'], t('Setting multiple headers with getRequestHeader()'));
    $this->assertEqual($bg->getRequestHeaders(), array('User-Agent' => array($headers['User-Agent']), 'X-Foo' => $headers['X-Foo']), t('Getting multiple headers with getRequestHeaders'));
    $bg = new BetterGetterHttp(url('<front>', array('absolute' => TRUE)));
    $bg->setCurlOpt(CURLOPT_USERAGENT, 'BetterGetter')->execute();
    $this->assertEqual($bg->getRequestHeader('User-Agent'), array('BetterGetter'), t('Parsing request headers after successful request'));
  }
}
